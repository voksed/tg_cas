import asyncio
import json
import os
import re
import warnings
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError, TelegramRetryAfter
from aiogram.filters import BaseFilter, Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message
from config import API_HASH, API_ID, PHONE_NUMBER, SESSION, TELEGRAM_ADMIN_IDS, TELEGRAM_GROUP_ID, TELEGRAM_TOKEN
from send_nft_gift import send_any_gift
from telethon import TelegramClient

warnings.filterwarnings("ignore", category=UserWarning, module="telethon.utils")

TOKEN = TELEGRAM_TOKEN
ADMIN_IDS = TELEGRAM_ADMIN_IDS
GROUP_ID = TELEGRAM_GROUP_ID
DATA_FILE = "slot_data.json"

bot = Bot(token=TOKEN)
dp = Dispatcher()
client = TelegramClient(SESSION, API_ID, API_HASH)

is_slot_active = False
total_spins = 0
last_admin_message = {}
command_message_ids = []

class RateLimitMiddleware(BaseMiddleware):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram API."""
    async def __call__(self, handler, event, data):
        while True:
            try:
                return await handler(event, data)
            except TelegramRetryAfter as e:
                await asyncio.sleep(e.retry_after + 1)
                continue

class SlotCommandFilter(BaseFilter):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ—Ç–∞."""
    async def __call__(self, message: Message) -> bool:
        if not message.text:
            return False
        return bool(re.match(r"^(?:/spin|!–∫—Ä—É—Ç–∏—Ç—å|–∫—Ä—É—Ç–∏—Ç—å|üé∞)(?:@\w+)?$", message.text, re.IGNORECASE))

def load_slot_data() -> None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    global is_slot_active, total_spins
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as file:
                data = json.load(file)
                is_slot_active = data.get("is_slot_active", False)
                total_spins = data.get("total_spins", 0)
        except Exception:
            pass

def save_slot_data() -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç–∞ –≤ —Ñ–∞–π–ª JSON."""
    try:
        with open(DATA_FILE, "w") as file:
            json.dump(
                {
                    "is_slot_active": is_slot_active,
                    "total_spins": total_spins,
                },
                file,
                indent=4,
            )
    except Exception:
        pass

def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç" if not is_slot_active else "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç",
                    callback_data="toggle_slot",
                )
            ],
            [
                InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats"),
                InlineKeyboardButton(text="–®–ø–∞—Ä–≥–∞–ª–∫–∞", callback_data="show_help"),
            ],
        ]
    )

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return user_id in ADMIN_IDS

def get_slot_status() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞."""
    return "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if is_slot_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

async def delete_message(chat_id: int, message_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    try:
        await bot.delete_message(chat_id, message_id)
        if chat_id == GROUP_ID:
            command_message_ids.append(message_id)
    except TelegramBadRequest:
        pass

async def clear_command_messages() -> None:
    """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏."""
    global command_message_ids
    for message_id in command_message_ids:
        try:
            await bot.delete_message(GROUP_ID, message_id)
        except TelegramBadRequest:
            continue
    command_message_ids = []
    await notify_admins("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")

async def notify_admins(message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º."""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message)
        except (TelegramForbiddenError, Exception):
            pass

async def mute_chat(chat_id: int) -> None:
    """–ú—å—é—Ç–∏—Ç —á–∞—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –¥–∂–µ–∫–ø–æ—Ç–µ."""
    try:
        await bot.set_chat_permissions(
            chat_id=chat_id,
            permissions={
                "can_send_messages": False,
                "can_send_media_messages": False,
                "can_send_polls": False,
                "can_send_other_messages": False,
                "can_add_web_page_previews": False,
            },
            until_date=datetime.now() + timedelta(minutes=5),
        )
        await bot.send_message(chat_id, "–ß–∞—Ç –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –¥–∂–µ–∫–ø–æ—Ç–∞!")
    except Exception:
        await notify_admins(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—å—é—Ç–µ —á–∞—Ç–∞ {chat_id}.")

async def update_admin_panel(admin_id: int, status: str, message_id: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å."""
    new_text = f"–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}"
    try:
        await bot.edit_message_text(
            chat_id=admin_id,
            message_id=message_id,
            text=new_text,
            reply_markup=get_admin_keyboard(),
        )
        last_admin_message[admin_id] = {"text": new_text, "message_id": message_id}
    except TelegramBadRequest as error:
        if "message is not modified" not in str(error):
            pass

@dp.message(Command("start"))
async def start_command(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    welcome_text = (
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—Å–ª–æ—Ç!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /spin, !–∫—Ä—É—Ç–∏—Ç—å, –∫—Ä—É—Ç–∏—Ç—å –∏–ª–∏ üé∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç.\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞: {get_slot_status()}."
    )
    await message.answer(welcome_text)

@dp.message(Command("admin"))
async def admin_panel(message: Message) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å."""
    if is_admin(message.from_user.id):
        status = get_slot_status()
        keyboard = get_admin_keyboard()
        response = await message.answer(
            f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–º:\n–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}",
            reply_markup=keyboard,
        )
        last_admin_message[message.from_user.id] = {
            "text": f"–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}",
            "message_id": response.message_id,
        }
    await delete_message(message.chat.id, message.message_id)

@dp.callback_query(F.data == "toggle_slot")
async def toggle_slot(callback_query) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–∞."""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return

    global is_slot_active
    is_slot_active = not is_slot_active
    status = get_slot_status()
    new_text = f"–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}"

    admin_id = callback_query.from_user.id
    if admin_id in last_admin_message and last_admin_message[admin_id]["text"] == new_text:
        await callback_query.answer(f"–°–ª–æ—Ç —É–∂–µ {status}.")
        return

    try:
        await callback_query.message.edit_text(new_text, reply_markup=get_admin_keyboard())
        last_admin_message[admin_id] = {"text": new_text, "message_id": callback_query.message.message_id}
        await callback_query.answer(f"–°–ª–æ—Ç {status}.")
    except TelegramBadRequest as error:
        if "message is not modified" in str(error):
            await callback_query.answer(f"–°–ª–æ—Ç —É–∂–µ {status}.")
        else:
            raise error

    if not is_slot_active:
        await clear_command_messages()

@dp.callback_query(F.data == "show_stats")
async def show_stats(callback_query) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä—É—Ç–æ–∫."""
    if is_admin(callback_query.from_user.id):
        await callback_query.answer(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}")
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

@dp.callback_query(F.data == "show_help")
async def show_help(callback_query) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–ø–∞—Ä–≥–∞–ª–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    if is_admin(callback_query.from_user.id):
        help_text = (
            f"üìã /admin - –ø–∞–Ω–µ–ª—å, /spin, !–∫—Ä—É—Ç–∏—Ç—å/–∫—Ä—É—Ç–∏—Ç—å/üé∞ - —Å–ª–æ—Ç. "
            f"–ö–æ–º–∞–Ω–¥—ã –∏ –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ª–æ—Ç–µ. "
            f"–°—Ç–∞—Ç—É—Å: {get_slot_status()}, –∫—Ä—É—Ç–æ–∫: {total_spins}"
        )
        await callback_query.answer(text=help_text, show_alert=True)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

@dp.message(SlotCommandFilter())
async def spin_slot(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Å–ª–æ—Ç–∞."""
    global is_slot_active, total_spins

    if message.chat.type in ["group", "supergroup"] and not is_slot_active:
        await delete_message(message.chat.id, message.message_id)
        return

    if message.chat.type in ["group", "supergroup"] and message.chat.id != GROUP_ID:
        await delete_message(message.chat.id, message.message_id)
        return

    if message.chat.type in ["group", "supergroup"]:
        total_spins += 1
        save_slot_data()

    user_ref = (
        f"@{message.from_user.username}"
        if message.from_user.username
        else f'<a href="tg://user?id={message.from_user.id}">–ò–≥—Ä–æ–∫</a>'
    )

    dice_message = await message.answer_dice(emoji="üé∞")
    value = dice_message.dice.value

    is_win = False
    if value == 64:
        await asyncio.sleep(1.5)
        result = f"üíé {user_ref}, –î–ñ–ï–ö–ü–û–¢!"
        is_win = True
        if message.chat.type in ["group", "supergroup"]:
            await mute_chat(message.chat.id)
            if message.from_user.username:
                try:
                    if not client.is_connected():
                        await client.connect()
                    await client.start(phone=PHONE_NUMBER)
                    gift_result = await send_any_gift(client, f"@{message.from_user.username}")
                    await client.disconnect()
                    if gift_result["success"]:
                        await message.answer(
                            f"üéâ {user_ref}, —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω NFT-–ø–æ–¥–∞—Ä–æ–∫ ({gift_result['slug']})!",
                            parse_mode="HTML",
                        )
                        await notify_admins(
                            f"NFT ({gift_result['slug']}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_ref} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}"
                        )
                    else:
                        error_msg = (
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_ref} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}: "
                            f"{gift_result['error']}"
                        )
                        await notify_admins(error_msg)
                        await message.answer(
                            f"üòî {user_ref}, –≤—ã–∏–≥—Ä–∞–ª –¥–∂–µ–∫–ø–æ—Ç, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ NFT.",
                            parse_mode="HTML",
                        )
                except Exception as e:
                    error_msg = (
                        f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_ref} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}: "
                        f"{str(e)}"
                    )
                    await notify_admins(error_msg)
                    await message.answer(
                        f"üòî {user_ref}, –≤—ã–∏–≥—Ä–∞–ª –¥–∂–µ–∫–ø–æ—Ç, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ NFT.",
                        parse_mode="HTML",
                    )
            else:
                error_msg = (
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_ref} –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username"
                )
                await notify_admins(error_msg)
                await message.answer(
                    f"üòî {user_ref}, –≤—ã–∏–≥—Ä–∞–ª –¥–∂–µ–∫–ø–æ—Ç, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç username –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ NFT.",
                    parse_mode="HTML",
                )
    else:
        await asyncio.sleep(1.5)
        result = f"üòî {user_ref}, –ø—Ä–æ–∏–≥—Ä—ã—à"

    await message.answer(result, parse_mode="HTML")
    await delete_message(message.chat.id, message.message_id)

    if is_win and message.chat.type in ["group", "supergroup"]:
        admin_message = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_ref} —Å—ã–≥—Ä–∞–ª –≤ —Å–ª–æ—Ç –≤ –≥—Ä—É–ø–ø–µ {message.chat.id}. "
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}"
        )
        await notify_admins(admin_message)

@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def delete_non_bot_messages(message: Message) -> None:
    """–£–¥–∞–ª—è–µ—Ç –Ω–µ–∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ª–æ—Ç–µ."""
    if message.chat.id != GROUP_ID or not is_slot_active:
        return

    is_command = message.text and re.match(r"^(?:/start|/spin|!–∫—Ä—É—Ç–∏—Ç—å|–∫—Ä—É—Ç–∏—Ç—å|üé∞)(?:@\w+)?$", message.text, re.IGNORECASE)
    is_bot_message = message.from_user.id == bot.id

    if not (is_command or is_bot_message):
        await delete_message(message.chat.id, message.message_id)

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è."""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    load_slot_data()
    dp.message.middleware(RateLimitMiddleware())
    try:
        if not os.path.exists(SESSION):
            print(f"–§–∞–π–ª —Å–µ—Å—Å–∏–∏ {SESSION} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ —Å–µ—Å—Å–∏—é.")
            return
        await client.connect()
        await dp.start_polling(bot)
    finally:
        if client.is_connected():
            await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())