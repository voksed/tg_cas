from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, BaseFilter
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest, TelegramRetryAfter
from aiogram import BaseMiddleware
import asyncio
from datetime import datetime, timedelta
import re
import json
import os
from config import *

TOKEN = TELEGRAM_TOKEN
ADMIN_IDS = TELEGRAM_ADMIN_IDS
GROUP_ID = TELEGRAM_GROUP_ID  # –ß–∏—Å–ª–æ–≤–æ–π ID –ø—É–±–ª–∏—á–Ω–æ–π –≥—Ä—É–ø–ø—ã
DATA_FILE = "slot_data.json"

bot = Bot(token=TOKEN)
dp = Dispatcher()

is_slot_active = False
total_spins = 0
last_admin_message = {}
command_message_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏

class RateLimitMiddleware(BaseMiddleware):
    """Middleware to handle TelegramRetryAfter exceptions."""
    async def __call__(self, handler, event, data):
        while True:
            try:
                return await handler(event, data)
            except TelegramRetryAfter as e:
                retry_after = e.retry_after + 1  # Add 1 second buffer
                await asyncio.sleep(retry_after)
                continue  # Retry the request after the delay

class SlotCommandFilter(BaseFilter):
    """Custom filter for slot commands."""
    async def __call__(self, message: Message) -> bool:
        if not message.text:
            return False
        return bool(re.match(r"^(?:/spin|!–∫—Ä—É—Ç–∏—Ç—å|–∫—Ä—É—Ç–∏—Ç—å|üé∞)(?:@\w+)?$", message.text, re.IGNORECASE))

def load_slot_data() -> None:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    global is_slot_active, total_spins
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, 'r') as file:
                data = json.load(file)
                is_slot_active = data.get("is_slot_active", False)
                total_spins = data.get("total_spins", 0)
        except Exception:
            pass

def save_slot_data() -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–æ—Ç–∞ –≤ —Ñ–∞–π–ª JSON."""
    try:
        with open(DATA_FILE, 'w') as file:
            json.dump({
                "is_slot_active": is_slot_active,
                "total_spins": total_spins
            }, file, indent=4)
    except Exception:
        pass

def get_admin_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏."""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç" if not is_slot_active else "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ—Ç",
            callback_data="toggle_slot"
        )],
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="show_stats"),
         InlineKeyboardButton(text="–®–ø–∞—Ä–≥–∞–ª–∫–∞", callback_data="show_help")]
    ])

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º."""
    return user_id in ADMIN_IDS

def get_slot_status() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞."""
    return "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if is_slot_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"

async def delete_message(chat_id: int, message_id: int) -> None:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏."""
    try:
        await bot.delete_message(chat_id, message_id)
        if chat_id == GROUP_ID:
            command_message_ids.append(message_id)
    except TelegramBadRequest:
        pass

async def clear_command_messages() -> None:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ command_message_ids."""
    global command_message_ids
    for message_id in command_message_ids:
        try:
            await bot.delete_message(GROUP_ID, message_id)
        except TelegramBadRequest:
            continue
    command_message_ids = []
    await notify_admins("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")

async def notify_admins(message: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º."""
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, message)
        except (TelegramForbiddenError, Exception):
            pass

async def mute_chat(chat_id: int) -> None:
    """–ú—å—é—Ç–∏—Ç —á–∞—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –¥–∂–µ–∫–ø–æ—Ç–µ."""
    try:
        await bot.set_chat_permissions(
            chat_id=chat_id,
            permissions={
                "can_send_messages": False,
                "can_send_media_messages": False,
                "can_send_polls": False,
                "can_send_other_messages": False,
                "can_add_web_page_previews": False
            },
            until_date=datetime.now() + timedelta(minutes=5)
        )
        await bot.send_message(chat_id, "–ß–∞—Ç –∑–∞–º—å—é—á–µ–Ω –Ω–∞ 5 –º–∏–Ω—É—Ç –∏–∑-–∑–∞ –¥–∂–µ–∫–ø–æ—Ç–∞!")
    except Exception:
        await notify_admins("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—å—é—Ç–µ —á–∞—Ç–∞.")

async def update_admin_panel(admin_id: int, status: str, message_id: int) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
    new_text = f"–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}"
    try:
        await bot.edit_message_text(
            chat_id=admin_id,
            message_id=message_id,
            text=new_text,
            reply_markup=get_admin_keyboard()
        )
        last_admin_message[admin_id] = {"text": new_text, "message_id": message_id}
    except TelegramBadRequest as error:
        if "message is not modified" not in str(error):
            pass

@dp.message(Command("start"))
async def start_command(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    welcome_text = (
        "üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—Å–ª–æ—Ç!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /spin, !–∫—Ä—É—Ç–∏—Ç—å, –∫—Ä—É—Ç–∏—Ç—å –∏–ª–∏ üé∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç.\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞: {get_slot_status()}."
    )
    await message.answer(welcome_text)

@dp.message(Command("admin"))
async def admin_panel(message: Message) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–º."""
    if is_admin(message.from_user.id):
        status = get_slot_status()
        keyboard = get_admin_keyboard()
        response = await message.answer(
            f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–æ–º:\n–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}",
            reply_markup=keyboard
        )
        last_admin_message[message.from_user.id] = {
            "text": f"–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}",
            "message_id": response.message_id
        }
    await delete_message(message.chat.id, message.message_id)

@dp.callback_query(F.data == "toggle_slot")
async def toggle_slot(callback_query) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å."""
    if not is_admin(callback_query.from_user.id):
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")
        return

    global is_slot_active
    is_slot_active = not is_slot_active
    status = get_slot_status()
    new_text = f"–°–ª–æ—Ç {status}!\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}"

    admin_id = callback_query.from_user.id
    if admin_id in last_admin_message and last_admin_message[admin_id]["text"] == new_text:
        await callback_query.answer(f"–°–ª–æ—Ç —É–∂–µ {status}.")
        return

    try:
        await callback_query.message.edit_text(new_text, reply_markup=get_admin_keyboard())
        last_admin_message[admin_id] = {"text": new_text, "message_id": callback_query.message.message_id}
        await callback_query.answer(f"–°–ª–æ—Ç {status}.")
    except TelegramBadRequest as error:
        if "message is not modified" in str(error):
            await callback_query.answer(f"–°–ª–æ—Ç —É–∂–µ {status}.")
        else:
            raise error

    if not is_slot_active:
        await clear_command_messages()

@dp.callback_query(F.data == "show_stats")
async def show_stats(callback_query) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—Ä—É—Ç–æ–∫ —Å–ª–æ—Ç–∞."""
    if is_admin(callback_query.from_user.id):
        await callback_query.answer(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}")
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

@dp.callback_query(F.data == "show_help")
async def show_help(callback_query) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —à–ø–∞—Ä–≥–∞–ª–∫—É –¥–ª—è –∞–¥–º–∏–Ω–æ–≤."""
    if is_admin(callback_query.from_user.id):
        help_text = (
            f"üìã /admin - –ø–∞–Ω–µ–ª—å, /spin, !–∫—Ä—É—Ç–∏—Ç—å/–∫—Ä—É—Ç–∏—Ç—å/üé∞ - —Å–ª–æ—Ç. "
            f"–ö–æ–º–∞–Ω–¥—ã –∏ –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ª–æ—Ç–µ. "
            f"–°—Ç–∞—Ç—É—Å: {get_slot_status()}, –∫—Ä—É—Ç–æ–∫: {total_spins}"
        )
        await callback_query.answer(text=help_text, show_alert=True)
    else:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!")

@dp.message(SlotCommandFilter())
async def spin_slot(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã /spin, !–∫—Ä—É—Ç–∏—Ç—å, –∫—Ä—É—Ç–∏—Ç—å –∏–ª–∏ üé∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç."""
    global is_slot_active, total_spins

    if message.chat.type in ["group", "supergroup"] and not is_slot_active:
        await delete_message(message.chat.id, message.message_id)
        return

    if message.chat.type in ["group", "supergroup"] and message.chat.id != GROUP_ID:
        await delete_message(message.chat.id, message.message_id)
        return

    if message.chat.type in ["group", "supergroup"]:
        total_spins += 1
        save_slot_data()

    user_ref = (
        f"@{message.from_user.username}"
        if message.from_user.username
        else f'<a href="tg://user?id={message.from_user.id}">–ò–≥—Ä–æ–∫</a>'
    )

    dice_message = await message.answer_dice(emoji="üé∞")
    value = dice_message.dice.value

    is_win = False
    if value == 64:
        await asyncio.sleep(1.5)
        result = f"üíé {user_ref}, –î–ñ–ï–ö–ü–û–¢!"
        is_win = True
        if message.chat.type in ["group", "supergroup"]:
            await mute_chat(message.chat.id)
    else:
        await asyncio.sleep(1.5)
        result = f"üòî {user_ref}, –ø—Ä–æ–∏–≥—Ä—ã—à"

    await message.answer(result, parse_mode="HTML")
    await delete_message(message.chat.id, message.message_id)

    if is_win and message.chat.type in ["group", "supergroup"]:
        admin_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_ref} —Å—ã–≥—Ä–∞–ª –≤ —Å–ª–æ—Ç. –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É—Ç–æ–∫: {total_spins}"
        await notify_admins(admin_message)

@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def delete_non_bot_messages(message: Message) -> None:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞, –µ—Å–ª–∏ —Å–ª–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω."""
    if message.chat.id != GROUP_ID or not is_slot_active:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –±–æ—Ç–∞
    is_command = (
        message.text and
        re.match(r"^(?:/start|/spin|!–∫—Ä—É—Ç–∏—Ç—å|–∫—Ä—É—Ç–∏—Ç—å|üé∞)(?:@\w+)?$", message.text, re.IGNORECASE)
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –±–æ—Ç–∞
    is_bot_message = message.from_user.id == bot.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏ –Ω–µ –æ—Ç –±–æ—Ç–∞
    if not (is_command or is_bot_message):
        await delete_message(message.chat.id, message.message_id)

async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    load_slot_data()
    dp.message.middleware(RateLimitMiddleware())  # Register the rate limit middleware
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())